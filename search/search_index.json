{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"librime-lua: Extending RIME with Lua scripts Features Supports extending RIME processors, segmentors, translators and filters Provides high-level programming model for translators and filters Loaded dynamically as a librime plugin Usage Create PATH_TO_RIME_USER_DATA_DIR/rime.lua : function date_translator(input, seg) if (input == \"date\") then --- Candidate(type, start, end, text, comment) yield(Candidate(\"date\", seg.start, seg._end, os.date(\"%Y\u5e74%m\u6708%d\u65e5\"), \" \u65e5\u671f\")) end end function single_char_first_filter(input) local l = {} for cand in input:iter() do if (utf8.len(cand.text) == 1) then yield(cand) else table.insert(l, cand) end end for i, cand in ipairs(l) do yield(cand) end end More sample: rime.lua Reference Lua functions in your schema: engine: ... translators: ... - lua_translator@date_translator - lua_translator@other_lua_function1 ... filters: ... - lua_filter@single_char_first_filter - lua_filter@other_lua_function2 Deploy & try Build Build dependencies librime >= 1.5.0 LuaJIT 2 / Lua 5.1 / Lua 5.2 / Lua 5.3 / Lua 5.4 Prebuilt versions Windows 1.4.0 backport master Instructions Prepare source code Move the source to the plugins directory of librime: mv librime-lua $PATH_TO_RIME_SOURCE/plugins/lua Or you can use the install-plugins.sh script to automatically fetch librime-lua: cd $PATH_TO_RIME_SOURCE bash install-plugins.sh hchunhui/librime-lua Install dependencies Install development files of Lua: # For Debian/Ubuntu: sudo apt install liblua5.3-dev # or libluajit-5.1-dev The build system will use pkg-config to search Lua. The build system also supports building Lua from source in the thirdparty directory. The thirdparty directory can be downloaded using the following commands: cd $PATH_TO_RIME_SOURCE/plugins/lua git clone https://github.com/hchunhui/librime-lua.git -b thirdparty --depth=1 thirdparty Build Follow the librime's build instructions. # On Linux, merged build make merged-plugins sudo make install For more information on RIME plugins, see here .","title":"Home"},{"location":"#librime-lua-extending-rime-with-lua-scripts","text":"","title":"librime-lua: Extending RIME with Lua scripts"},{"location":"#features","text":"Supports extending RIME processors, segmentors, translators and filters Provides high-level programming model for translators and filters Loaded dynamically as a librime plugin","title":"Features"},{"location":"#usage","text":"Create PATH_TO_RIME_USER_DATA_DIR/rime.lua : function date_translator(input, seg) if (input == \"date\") then --- Candidate(type, start, end, text, comment) yield(Candidate(\"date\", seg.start, seg._end, os.date(\"%Y\u5e74%m\u6708%d\u65e5\"), \" \u65e5\u671f\")) end end function single_char_first_filter(input) local l = {} for cand in input:iter() do if (utf8.len(cand.text) == 1) then yield(cand) else table.insert(l, cand) end end for i, cand in ipairs(l) do yield(cand) end end More sample: rime.lua Reference Lua functions in your schema: engine: ... translators: ... - lua_translator@date_translator - lua_translator@other_lua_function1 ... filters: ... - lua_filter@single_char_first_filter - lua_filter@other_lua_function2 Deploy & try","title":"Usage"},{"location":"#build","text":"","title":"Build"},{"location":"#build-dependencies","text":"librime >= 1.5.0 LuaJIT 2 / Lua 5.1 / Lua 5.2 / Lua 5.3 / Lua 5.4","title":"Build dependencies"},{"location":"#prebuilt-versions","text":"Windows 1.4.0 backport master","title":"Prebuilt versions"},{"location":"#instructions","text":"Prepare source code Move the source to the plugins directory of librime: mv librime-lua $PATH_TO_RIME_SOURCE/plugins/lua Or you can use the install-plugins.sh script to automatically fetch librime-lua: cd $PATH_TO_RIME_SOURCE bash install-plugins.sh hchunhui/librime-lua Install dependencies Install development files of Lua: # For Debian/Ubuntu: sudo apt install liblua5.3-dev # or libluajit-5.1-dev The build system will use pkg-config to search Lua. The build system also supports building Lua from source in the thirdparty directory. The thirdparty directory can be downloaded using the following commands: cd $PATH_TO_RIME_SOURCE/plugins/lua git clone https://github.com/hchunhui/librime-lua.git -b thirdparty --depth=1 thirdparty Build Follow the librime's build instructions. # On Linux, merged build make merged-plugins sudo make install For more information on RIME plugins, see here .","title":"Instructions"},{"location":"api/","text":"Module All librime-lua module should export as a table like {init=function, func=function, fini=function} Tips: in this document parameters were presented as function(parameter : type) or function(type) Example example.schema.yaml engine: # binding lua_function to rime components translators: - lua_translator@lua_tran # lua_tran.func(input,Segment,env) filters: - lua_filter@lua_filt # lua_filt.func(input) processor: - lua_processor@lua_proc # lua_proc.func(KeyEvent,env) rime.lua lua_tran = require(\"aTranslator\") lua_filt = require(\"aFilter\") lua_proc = require(\"aProcessor\") aTranslator.lua local function main(input,segment,env) print(env.hello) -- helloRime end local function destory() print(\"Destroied!\") end local function prepare(env) env.hello = \"helloRime\" end return {init = prepare,func = main,fini = destory} aFilter.lua local function filter(input) local l = {} for cand in input:iter() do if (utf8.len(cand.text) == 1) then yield(cand) else table.insert(l, cand) end end for i, cand in ipairs(l) do yield(cand) end end return filter -- or -- return {init = nil,func = filter, fini = nil} aProcessor local function filter(key,env) print(key.keycode) end local function init(env) print(env.engine.schema.schema_id) end return {init = init, func = filter, fini = nil} init init(env) would be called when Initializing. env is the global variable of librime-Lua containing the librime environment, which has the following properties. env.engine type of engine and env.name_space type of string You could bind variables to env and use it in your module. -- in test.lua function ModuleInit(env) env.memory = Memory(env.engine,env.engine.schema) env.pyrdb = ReverseDb(\"build/terra_pinyin.reverse.bin\") end return {init = ModuleInit} func func would be called when rime is attempting to call the module. Which parameters would be passed depending on which rime component bind with the Lua module. If Module bind with Translator. func(input, Segment, env) Would be called by Translator::Query . tips: input is type of string If Module bind with Filter. func(Translation, env) would be called Filter::apply If Module bind with Processor. func(KeyEvent, env) would be called by Processor::ProcessKeyEvent fini When LuaTranslator, LuaFilter, LuaProcess being destoried fini would be called librime-lua built-in component DictEntry Functions DictEntry() Getters text comment preedit weight commit_count custom_code remaining_code_length code Setters text comment preedit weight commit_count custom_code remaining_code_length code Code Functions Code() Methods push print CommitEntry Functions CommitEntry() Methods get() Memory Introduction A compoent that could access to Dictionary and UserDictionary Functions Memory(Engine, Schema) Returns the Instance of Memory Instance a Memory Object with given Engine and Scehma CustomMemory(Engine, schema_id=\"\", namespace=\"translator\") Returns the Instance of Memory Instance a Memory Object with given Engine (running Engine), a scheme_id , and namespace scheme_id were defined on input method schema cangjie5.schema.yaml schema: schema_id: cangjie5 # this one name: \u5009\u9821\u4e94\u4ee3 version: \"1.1.test\" namespace is used to collect yaml tag of namespace/dictionary namespace/enable_user_dict and namespace/db_class in schema. cangjie5.schema.yaml translator: dictionary: cangjie5 #this one! # enable_user_dict: true #this one # db_class: tabledb #this one enable_charset_filter: true enable_sentence: true enable_encoder: true encode_commit_history: true max_phrase_length: 5 preedit_format: - 'xform/^([a-z]*)$/$1\\t\uff08\\U$1\\E\uff09/' - \"xlit|ABCDEFGHIJKLMNOPQRSTUVWXYZ|\u65e5\u6708\u91d1\u6728\u6c34\u706b\u571f\u7af9\u6208\u5341\u5927\u4e2d\u4e00\u5f13\u4eba\u5fc3\u624b\u53e3\u5c38\u5eff\u5c71\u5973\u7530\u96e3\u535c\u7b26|\" comment_format: - \"xlit|abcdefghijklmnopqrstuvwxyz~|\u65e5\u6708\u91d1\u6728\u6c34\u706b\u571f\u7af9\u6208\u5341\u5927\u4e2d\u4e00\u5f13\u4eba\u5fc3\u624b\u53e3\u5c38\u5eff\u5c71\u5973\u7530\u96e3\u535c\u7b26\uff5e|\" disable_user_dict_for_patterns: - \"^z.*$\" - \"^yyy.*$\" Methods dictLookup(input : string, isExpand : boolean) Returns true if Lookup success. The results are stored in DicionaryIterator inside Memory . If isExpand were true, it would expand your input as a prefix. For example, the input is \"hq\", all results with the prefix \"hq\" in code would be output. userLookup(input : string, isExpand : boolean) Returns true if Lookup success. The results are stored in UserDicionaryIterator inside Memory . If isExpand were true, it would expand your input as a prefix. For example, the input is \"hq\", all results with the prefix \"hq\" in code would be output. iter_dict() Returns a Lua Iterator Of Dictionary Lookup Results which iterates a dictEntry. iter_user() Returns a Lua Iterator Of UserDictionary Lookup Results which iterates a dictEntry. memorize(function(CommitEntry)) To bind a lua_Function to Memory::memorize The Function would be called after commit, passing CommitEntry (contains committed dictEntry ) to it. You could use CommitEntry to manage User_Dict updateUserdict(DictEntry, commits : number, new_entry_prefix : string) Update UserDictionary with specific DictEntry If commits < 0 this entry would be marked as deleted. If commits > 0 then increasing the frequency of this entry committed. new_entry_prefix would become the code prefix of this entry Segment Functions Segment(start_pos : number, end_pos : number) Returns Instance of Segment Methods clear() clean tags, reset menu,set Selected_index to 0,Clear prompt close() auto select Candidate then split into selected segment and unselcted segment reopen(caret_pos : number) bool Segment::Reopen(size_t caret_pos) { if (status < kSelected) { return false; } const size_t original_end_pos = start + length; if (original_end_pos == caret_pos) { // reuse previous candidates and keep selection if (end < original_end_pos) { // restore partial-selected segment end = original_end_pos; tags.erase(kPartialSelectionTag); } status = kGuess; } else { status = kVoid; } return true; } has_tag(tag : string) Returns if the tag has been found. get_candidate_at(index : number) Returns Candidate of specific index. get_selected_candidate() Returns Candidte of selected candidte. Getters status : string Returns \"kVoid\" \"kVGuess\" \"kselected\" or \"kConfirmed\" start : number _end : number length : number Returns Segment's length tags : table Returns a set of tags menu : Menu selected_index : number prompt : string Setters status : string start : number _end : number length : number tags : table menu : Menu selected_index : number prompt : string Candidate Functions Candidate(type : string, start : number, end: number, text : string, comment : string) Returns Instance of Candidate Methods get_dynamic_type() get_genuine(Candidate) get_genuines(Candidate) Getters type start _end quality text comment preedit Setters type start _end quality text comment preedit Translation Functions Translation(initFunction : function) Returns Instance of Translation ,and call the initFunction. Methods iter() Returns lua iterator for Translation that iterate Candidate ReverseDb Functions ReverseDb(ReverseDb_File_Name : string) Returns Instance of ReverseDb Methods lookup(key : string) Returns string of reverseDb lookup result Segmentation Methods empty back pop_back reset_length add_segment forward trim has_finished_segmentation get_current_start_position get_current_end_position get_current_segment_length get_confirmed_position Getters input : string Setters input : string Menu Functions add_translation prepare get_candidate_at candidate_count empty KeyEvent Methods shift ctrl alt caps super release repr eq lt Getters keycode modifier Engine Methods commit_text Getters schema context active_engine Setters active_engine Context Methods commit get_commit_text get_script_text get_preedit is_composing has_menu get_selected_candidate push_input pop_input delete_input clear select confirm_current_selection delete_current_selection confirm_previous_selection reopen_previous_selection clear_previous_segment reopen_previous_segment clear_non_confirmed_composition refresh_non_confirmed_composition set_option get_option set_property get_property clear_transient_options Getters composition input caret_pos commit_notifier select_notifier update_notifier delete_notifier option_update_notifier property_update_notifier unhandled_key_notifier Setters composition input caret_pos Preedit Getters text caret_pos sel_start sel_end Setters text caret_pos sel_start sel_end Composition Methods empty back pop_back push_back has_finished_composition get_prompt Schema Functions Schema(schema_id : string) Getters schema_id schema_name config page_size select_keys Setters config select_keys Config Methods load_from_file save_to_file is_null is_value is_list is_map get_bool get_int get_double get_string get_list_size set_bool set_int set_double set_string Connection Methods disconnect Notifier Methods connect OptionUpdateNotifier Methods connect PropertyUpdateNotifier Methods connect KeyEventNotifer Methods connect Log Functions info warning error","title":"API"},{"location":"api/#module","text":"All librime-lua module should export as a table like {init=function, func=function, fini=function} Tips: in this document parameters were presented as function(parameter : type) or function(type)","title":"Module"},{"location":"api/#example","text":"example.schema.yaml engine: # binding lua_function to rime components translators: - lua_translator@lua_tran # lua_tran.func(input,Segment,env) filters: - lua_filter@lua_filt # lua_filt.func(input) processor: - lua_processor@lua_proc # lua_proc.func(KeyEvent,env) rime.lua lua_tran = require(\"aTranslator\") lua_filt = require(\"aFilter\") lua_proc = require(\"aProcessor\") aTranslator.lua local function main(input,segment,env) print(env.hello) -- helloRime end local function destory() print(\"Destroied!\") end local function prepare(env) env.hello = \"helloRime\" end return {init = prepare,func = main,fini = destory} aFilter.lua local function filter(input) local l = {} for cand in input:iter() do if (utf8.len(cand.text) == 1) then yield(cand) else table.insert(l, cand) end end for i, cand in ipairs(l) do yield(cand) end end return filter -- or -- return {init = nil,func = filter, fini = nil} aProcessor local function filter(key,env) print(key.keycode) end local function init(env) print(env.engine.schema.schema_id) end return {init = init, func = filter, fini = nil}","title":"Example"},{"location":"api/#init","text":"init(env) would be called when Initializing. env is the global variable of librime-Lua containing the librime environment, which has the following properties. env.engine type of engine and env.name_space type of string You could bind variables to env and use it in your module. -- in test.lua function ModuleInit(env) env.memory = Memory(env.engine,env.engine.schema) env.pyrdb = ReverseDb(\"build/terra_pinyin.reverse.bin\") end return {init = ModuleInit}","title":"init"},{"location":"api/#func","text":"func would be called when rime is attempting to call the module. Which parameters would be passed depending on which rime component bind with the Lua module. If Module bind with Translator. func(input, Segment, env) Would be called by Translator::Query . tips: input is type of string If Module bind with Filter. func(Translation, env) would be called Filter::apply If Module bind with Processor. func(KeyEvent, env) would be called by Processor::ProcessKeyEvent","title":"func"},{"location":"api/#fini","text":"When LuaTranslator, LuaFilter, LuaProcess being destoried fini would be called","title":"fini"},{"location":"api/#librime-lua-built-in-component","text":"","title":"librime-lua built-in component"},{"location":"api/#dictentry","text":"","title":"DictEntry"},{"location":"api/#functions","text":"","title":"Functions"},{"location":"api/#dictentry_1","text":"","title":"DictEntry()"},{"location":"api/#getters","text":"","title":"Getters"},{"location":"api/#text","text":"","title":"text"},{"location":"api/#comment","text":"","title":"comment"},{"location":"api/#preedit","text":"","title":"preedit"},{"location":"api/#weight","text":"","title":"weight"},{"location":"api/#commit_count","text":"","title":"commit_count"},{"location":"api/#custom_code","text":"","title":"custom_code"},{"location":"api/#remaining_code_length","text":"","title":"remaining_code_length"},{"location":"api/#code","text":"","title":"code"},{"location":"api/#setters","text":"","title":"Setters"},{"location":"api/#text_1","text":"","title":"text"},{"location":"api/#comment_1","text":"","title":"comment"},{"location":"api/#preedit_1","text":"","title":"preedit"},{"location":"api/#weight_1","text":"","title":"weight"},{"location":"api/#commit_count_1","text":"","title":"commit_count"},{"location":"api/#custom_code_1","text":"","title":"custom_code"},{"location":"api/#remaining_code_length_1","text":"","title":"remaining_code_length"},{"location":"api/#code_1","text":"","title":"code"},{"location":"api/#code_2","text":"","title":"Code"},{"location":"api/#functions_1","text":"","title":"Functions"},{"location":"api/#code_3","text":"","title":"Code()"},{"location":"api/#methods","text":"","title":"Methods"},{"location":"api/#push","text":"","title":"push"},{"location":"api/#print","text":"","title":"print"},{"location":"api/#commitentry","text":"","title":"CommitEntry"},{"location":"api/#functions_2","text":"","title":"Functions"},{"location":"api/#commitentry_1","text":"","title":"CommitEntry()"},{"location":"api/#methods_1","text":"","title":"Methods"},{"location":"api/#get","text":"","title":"get()"},{"location":"api/#memory","text":"","title":"Memory"},{"location":"api/#introduction","text":"A compoent that could access to Dictionary and UserDictionary","title":"Introduction"},{"location":"api/#functions_3","text":"","title":"Functions"},{"location":"api/#memoryengine-schema","text":"Returns the Instance of Memory Instance a Memory Object with given Engine and Scehma","title":"Memory(Engine, Schema)"},{"location":"api/#custommemoryengine-schema_id-namespacetranslator","text":"Returns the Instance of Memory Instance a Memory Object with given Engine (running Engine), a scheme_id , and namespace scheme_id were defined on input method schema cangjie5.schema.yaml schema: schema_id: cangjie5 # this one name: \u5009\u9821\u4e94\u4ee3 version: \"1.1.test\" namespace is used to collect yaml tag of namespace/dictionary namespace/enable_user_dict and namespace/db_class in schema. cangjie5.schema.yaml translator: dictionary: cangjie5 #this one! # enable_user_dict: true #this one # db_class: tabledb #this one enable_charset_filter: true enable_sentence: true enable_encoder: true encode_commit_history: true max_phrase_length: 5 preedit_format: - 'xform/^([a-z]*)$/$1\\t\uff08\\U$1\\E\uff09/' - \"xlit|ABCDEFGHIJKLMNOPQRSTUVWXYZ|\u65e5\u6708\u91d1\u6728\u6c34\u706b\u571f\u7af9\u6208\u5341\u5927\u4e2d\u4e00\u5f13\u4eba\u5fc3\u624b\u53e3\u5c38\u5eff\u5c71\u5973\u7530\u96e3\u535c\u7b26|\" comment_format: - \"xlit|abcdefghijklmnopqrstuvwxyz~|\u65e5\u6708\u91d1\u6728\u6c34\u706b\u571f\u7af9\u6208\u5341\u5927\u4e2d\u4e00\u5f13\u4eba\u5fc3\u624b\u53e3\u5c38\u5eff\u5c71\u5973\u7530\u96e3\u535c\u7b26\uff5e|\" disable_user_dict_for_patterns: - \"^z.*$\" - \"^yyy.*$\"","title":"CustomMemory(Engine, schema_id=\"\", namespace=\"translator\")"},{"location":"api/#methods_2","text":"","title":"Methods"},{"location":"api/#dictlookupinput-string-isexpand-boolean","text":"Returns true if Lookup success. The results are stored in DicionaryIterator inside Memory . If isExpand were true, it would expand your input as a prefix. For example, the input is \"hq\", all results with the prefix \"hq\" in code would be output.","title":"dictLookup(input : string, isExpand : boolean)"},{"location":"api/#userlookupinput-string-isexpand-boolean","text":"Returns true if Lookup success. The results are stored in UserDicionaryIterator inside Memory . If isExpand were true, it would expand your input as a prefix. For example, the input is \"hq\", all results with the prefix \"hq\" in code would be output.","title":"userLookup(input : string, isExpand : boolean)"},{"location":"api/#iter_dict","text":"Returns a Lua Iterator Of Dictionary Lookup Results which iterates a dictEntry.","title":"iter_dict()"},{"location":"api/#iter_user","text":"Returns a Lua Iterator Of UserDictionary Lookup Results which iterates a dictEntry.","title":"iter_user()"},{"location":"api/#memorizefunctioncommitentry","text":"To bind a lua_Function to Memory::memorize The Function would be called after commit, passing CommitEntry (contains committed dictEntry ) to it. You could use CommitEntry to manage User_Dict","title":"memorize(function(CommitEntry))"},{"location":"api/#updateuserdictdictentry-commits-number-new_entry_prefix-string","text":"Update UserDictionary with specific DictEntry If commits < 0 this entry would be marked as deleted. If commits > 0 then increasing the frequency of this entry committed. new_entry_prefix would become the code prefix of this entry","title":"updateUserdict(DictEntry, commits : number, new_entry_prefix : string)"},{"location":"api/#segment","text":"","title":"Segment"},{"location":"api/#functions_4","text":"","title":"Functions"},{"location":"api/#segmentstart_pos-number-end_pos-number","text":"Returns Instance of Segment","title":"Segment(start_pos : number, end_pos : number)"},{"location":"api/#methods_3","text":"","title":"Methods"},{"location":"api/#clear","text":"clean tags, reset menu,set Selected_index to 0,Clear prompt","title":"clear()"},{"location":"api/#close","text":"auto select Candidate then split into selected segment and unselcted segment","title":"close()"},{"location":"api/#reopencaret_pos-number","text":"bool Segment::Reopen(size_t caret_pos) { if (status < kSelected) { return false; } const size_t original_end_pos = start + length; if (original_end_pos == caret_pos) { // reuse previous candidates and keep selection if (end < original_end_pos) { // restore partial-selected segment end = original_end_pos; tags.erase(kPartialSelectionTag); } status = kGuess; } else { status = kVoid; } return true; }","title":"reopen(caret_pos : number)"},{"location":"api/#has_tagtag-string","text":"Returns if the tag has been found.","title":"has_tag(tag : string)"},{"location":"api/#get_candidate_atindex-number","text":"Returns Candidate of specific index.","title":"get_candidate_at(index : number)"},{"location":"api/#get_selected_candidate","text":"Returns Candidte of selected candidte.","title":"get_selected_candidate()"},{"location":"api/#getters_1","text":"","title":"Getters"},{"location":"api/#status-string","text":"Returns \"kVoid\" \"kVGuess\" \"kselected\" or \"kConfirmed\"","title":"status : string"},{"location":"api/#start-number","text":"","title":"start : number"},{"location":"api/#_end-number","text":"","title":"_end : number"},{"location":"api/#length-number","text":"Returns Segment's length","title":"length : number"},{"location":"api/#tags-table","text":"Returns a set of tags","title":"tags : table"},{"location":"api/#menu-menu","text":"","title":"menu : Menu"},{"location":"api/#selected_index-number","text":"","title":"selected_index : number"},{"location":"api/#prompt-string","text":"","title":"prompt : string"},{"location":"api/#setters_1","text":"","title":"Setters"},{"location":"api/#status-string_1","text":"","title":"status : string"},{"location":"api/#start-number_1","text":"","title":"start : number"},{"location":"api/#_end-number_1","text":"","title":"_end : number"},{"location":"api/#length-number_1","text":"","title":"length : number"},{"location":"api/#tags-table_1","text":"","title":"tags : table"},{"location":"api/#menu-menu_1","text":"","title":"menu : Menu"},{"location":"api/#selected_index-number_1","text":"","title":"selected_index : number"},{"location":"api/#prompt-string_1","text":"","title":"prompt : string"},{"location":"api/#candidate","text":"","title":"Candidate"},{"location":"api/#functions_5","text":"","title":"Functions"},{"location":"api/#candidatetype-string-start-number-end-number-text-string-comment-string","text":"Returns Instance of Candidate","title":"Candidate(type : string, start : number, end: number, text : string, comment : string)"},{"location":"api/#methods_4","text":"","title":"Methods"},{"location":"api/#get_dynamic_type","text":"","title":"get_dynamic_type()"},{"location":"api/#get_genuinecandidate","text":"","title":"get_genuine(Candidate)"},{"location":"api/#get_genuinescandidate","text":"","title":"get_genuines(Candidate)"},{"location":"api/#getters_2","text":"","title":"Getters"},{"location":"api/#type","text":"","title":"type"},{"location":"api/#start","text":"","title":"start"},{"location":"api/#_end","text":"","title":"_end"},{"location":"api/#quality","text":"","title":"quality"},{"location":"api/#text_2","text":"","title":"text"},{"location":"api/#comment_2","text":"","title":"comment"},{"location":"api/#preedit_2","text":"","title":"preedit"},{"location":"api/#setters_2","text":"","title":"Setters"},{"location":"api/#type_1","text":"","title":"type"},{"location":"api/#start_1","text":"","title":"start"},{"location":"api/#_end_1","text":"","title":"_end"},{"location":"api/#quality_1","text":"","title":"quality"},{"location":"api/#text_3","text":"","title":"text"},{"location":"api/#comment_3","text":"","title":"comment"},{"location":"api/#preedit_3","text":"","title":"preedit"},{"location":"api/#translation","text":"","title":"Translation"},{"location":"api/#functions_6","text":"","title":"Functions"},{"location":"api/#translationinitfunction-function","text":"Returns Instance of Translation ,and call the initFunction.","title":"Translation(initFunction : function)"},{"location":"api/#methods_5","text":"","title":"Methods"},{"location":"api/#iter","text":"Returns lua iterator for Translation that iterate Candidate","title":"iter()"},{"location":"api/#reversedb","text":"","title":"ReverseDb"},{"location":"api/#functions_7","text":"","title":"Functions"},{"location":"api/#reversedbreversedb_file_name-string","text":"Returns Instance of ReverseDb","title":"ReverseDb(ReverseDb_File_Name : string)"},{"location":"api/#methods_6","text":"","title":"Methods"},{"location":"api/#lookupkey-string","text":"Returns string of reverseDb lookup result","title":"lookup(key : string)"},{"location":"api/#segmentation","text":"","title":"Segmentation"},{"location":"api/#methods_7","text":"","title":"Methods"},{"location":"api/#empty","text":"","title":"empty"},{"location":"api/#back","text":"","title":"back"},{"location":"api/#pop_back","text":"","title":"pop_back"},{"location":"api/#reset_length","text":"","title":"reset_length"},{"location":"api/#add_segment","text":"","title":"add_segment"},{"location":"api/#forward","text":"","title":"forward"},{"location":"api/#trim","text":"","title":"trim"},{"location":"api/#has_finished_segmentation","text":"","title":"has_finished_segmentation"},{"location":"api/#get_current_start_position","text":"","title":"get_current_start_position"},{"location":"api/#get_current_end_position","text":"","title":"get_current_end_position"},{"location":"api/#get_current_segment_length","text":"","title":"get_current_segment_length"},{"location":"api/#get_confirmed_position","text":"","title":"get_confirmed_position"},{"location":"api/#getters_3","text":"","title":"Getters"},{"location":"api/#input-string","text":"","title":"input : string"},{"location":"api/#setters_3","text":"","title":"Setters"},{"location":"api/#input-string_1","text":"","title":"input : string"},{"location":"api/#menu","text":"","title":"Menu"},{"location":"api/#functions_8","text":"","title":"Functions"},{"location":"api/#add_translation","text":"","title":"add_translation"},{"location":"api/#prepare","text":"","title":"prepare"},{"location":"api/#get_candidate_at","text":"","title":"get_candidate_at"},{"location":"api/#candidate_count","text":"","title":"candidate_count"},{"location":"api/#empty_1","text":"","title":"empty"},{"location":"api/#keyevent","text":"","title":"KeyEvent"},{"location":"api/#methods_8","text":"","title":"Methods"},{"location":"api/#shift","text":"","title":"shift"},{"location":"api/#ctrl","text":"","title":"ctrl"},{"location":"api/#alt","text":"","title":"alt"},{"location":"api/#caps","text":"","title":"caps"},{"location":"api/#super","text":"","title":"super"},{"location":"api/#release","text":"","title":"release"},{"location":"api/#repr","text":"","title":"repr"},{"location":"api/#eq","text":"","title":"eq"},{"location":"api/#lt","text":"","title":"lt"},{"location":"api/#getters_4","text":"","title":"Getters"},{"location":"api/#keycode","text":"","title":"keycode"},{"location":"api/#modifier","text":"","title":"modifier"},{"location":"api/#engine","text":"","title":"Engine"},{"location":"api/#methods_9","text":"","title":"Methods"},{"location":"api/#commit_text","text":"","title":"commit_text"},{"location":"api/#getters_5","text":"","title":"Getters"},{"location":"api/#schema","text":"","title":"schema"},{"location":"api/#context","text":"","title":"context"},{"location":"api/#active_engine","text":"","title":"active_engine"},{"location":"api/#setters_4","text":"","title":"Setters"},{"location":"api/#active_engine_1","text":"","title":"active_engine"},{"location":"api/#context_1","text":"","title":"Context"},{"location":"api/#methods_10","text":"","title":"Methods"},{"location":"api/#commit","text":"","title":"commit"},{"location":"api/#get_commit_text","text":"","title":"get_commit_text"},{"location":"api/#get_script_text","text":"","title":"get_script_text"},{"location":"api/#get_preedit","text":"","title":"get_preedit"},{"location":"api/#is_composing","text":"","title":"is_composing"},{"location":"api/#has_menu","text":"","title":"has_menu"},{"location":"api/#get_selected_candidate_1","text":"","title":"get_selected_candidate"},{"location":"api/#push_input","text":"","title":"push_input"},{"location":"api/#pop_input","text":"","title":"pop_input"},{"location":"api/#delete_input","text":"","title":"delete_input"},{"location":"api/#clear_1","text":"","title":"clear"},{"location":"api/#select","text":"","title":"select"},{"location":"api/#confirm_current_selection","text":"","title":"confirm_current_selection"},{"location":"api/#delete_current_selection","text":"","title":"delete_current_selection"},{"location":"api/#confirm_previous_selection","text":"","title":"confirm_previous_selection"},{"location":"api/#reopen_previous_selection","text":"","title":"reopen_previous_selection"},{"location":"api/#clear_previous_segment","text":"","title":"clear_previous_segment"},{"location":"api/#reopen_previous_segment","text":"","title":"reopen_previous_segment"},{"location":"api/#clear_non_confirmed_composition","text":"","title":"clear_non_confirmed_composition"},{"location":"api/#refresh_non_confirmed_composition","text":"","title":"refresh_non_confirmed_composition"},{"location":"api/#set_option","text":"","title":"set_option"},{"location":"api/#get_option","text":"","title":"get_option"},{"location":"api/#set_property","text":"","title":"set_property"},{"location":"api/#get_property","text":"","title":"get_property"},{"location":"api/#clear_transient_options","text":"","title":"clear_transient_options"},{"location":"api/#getters_6","text":"","title":"Getters"},{"location":"api/#composition","text":"","title":"composition"},{"location":"api/#input","text":"","title":"input"},{"location":"api/#caret_pos","text":"","title":"caret_pos"},{"location":"api/#commit_notifier","text":"","title":"commit_notifier"},{"location":"api/#select_notifier","text":"","title":"select_notifier"},{"location":"api/#update_notifier","text":"","title":"update_notifier"},{"location":"api/#delete_notifier","text":"","title":"delete_notifier"},{"location":"api/#option_update_notifier","text":"","title":"option_update_notifier"},{"location":"api/#property_update_notifier","text":"","title":"property_update_notifier"},{"location":"api/#unhandled_key_notifier","text":"","title":"unhandled_key_notifier"},{"location":"api/#setters_5","text":"","title":"Setters"},{"location":"api/#composition_1","text":"","title":"composition"},{"location":"api/#input_1","text":"","title":"input"},{"location":"api/#caret_pos_1","text":"","title":"caret_pos"},{"location":"api/#preedit_4","text":"","title":"Preedit"},{"location":"api/#getters_7","text":"","title":"Getters"},{"location":"api/#text_4","text":"","title":"text"},{"location":"api/#caret_pos_2","text":"","title":"caret_pos"},{"location":"api/#sel_start","text":"","title":"sel_start"},{"location":"api/#sel_end","text":"","title":"sel_end"},{"location":"api/#setters_6","text":"","title":"Setters"},{"location":"api/#text_5","text":"","title":"text"},{"location":"api/#caret_pos_3","text":"","title":"caret_pos"},{"location":"api/#sel_start_1","text":"","title":"sel_start"},{"location":"api/#sel_end_1","text":"","title":"sel_end"},{"location":"api/#composition_2","text":"","title":"Composition"},{"location":"api/#methods_11","text":"","title":"Methods"},{"location":"api/#empty_2","text":"","title":"empty"},{"location":"api/#back_1","text":"","title":"back"},{"location":"api/#pop_back_1","text":"","title":"pop_back"},{"location":"api/#push_back","text":"","title":"push_back"},{"location":"api/#has_finished_composition","text":"","title":"has_finished_composition"},{"location":"api/#get_prompt","text":"","title":"get_prompt"},{"location":"api/#schema_1","text":"","title":"Schema"},{"location":"api/#functions_9","text":"","title":"Functions"},{"location":"api/#schemaschema_id-string","text":"","title":"Schema(schema_id : string)"},{"location":"api/#getters_8","text":"","title":"Getters"},{"location":"api/#schema_id","text":"","title":"schema_id"},{"location":"api/#schema_name","text":"","title":"schema_name"},{"location":"api/#config","text":"","title":"config"},{"location":"api/#page_size","text":"","title":"page_size"},{"location":"api/#select_keys","text":"","title":"select_keys"},{"location":"api/#setters_7","text":"","title":"Setters"},{"location":"api/#config_1","text":"","title":"config"},{"location":"api/#select_keys_1","text":"","title":"select_keys"},{"location":"api/#config_2","text":"","title":"Config"},{"location":"api/#methods_12","text":"","title":"Methods"},{"location":"api/#load_from_file","text":"","title":"load_from_file"},{"location":"api/#save_to_file","text":"","title":"save_to_file"},{"location":"api/#is_null","text":"","title":"is_null"},{"location":"api/#is_value","text":"","title":"is_value"},{"location":"api/#is_list","text":"","title":"is_list"},{"location":"api/#is_map","text":"","title":"is_map"},{"location":"api/#get_bool","text":"","title":"get_bool"},{"location":"api/#get_int","text":"","title":"get_int"},{"location":"api/#get_double","text":"","title":"get_double"},{"location":"api/#get_string","text":"","title":"get_string"},{"location":"api/#get_list_size","text":"","title":"get_list_size"},{"location":"api/#set_bool","text":"","title":"set_bool"},{"location":"api/#set_int","text":"","title":"set_int"},{"location":"api/#set_double","text":"","title":"set_double"},{"location":"api/#set_string","text":"","title":"set_string"},{"location":"api/#connection","text":"","title":"Connection"},{"location":"api/#methods_13","text":"","title":"Methods"},{"location":"api/#disconnect","text":"","title":"disconnect"},{"location":"api/#notifier","text":"","title":"Notifier"},{"location":"api/#methods_14","text":"","title":"Methods"},{"location":"api/#connect","text":"","title":"connect"},{"location":"api/#optionupdatenotifier","text":"","title":"OptionUpdateNotifier"},{"location":"api/#methods_15","text":"","title":"Methods"},{"location":"api/#connect_1","text":"","title":"connect"},{"location":"api/#propertyupdatenotifier","text":"","title":"PropertyUpdateNotifier"},{"location":"api/#methods_16","text":"","title":"Methods"},{"location":"api/#connect_2","text":"","title":"connect"},{"location":"api/#keyeventnotifer","text":"","title":"KeyEventNotifer"},{"location":"api/#methods_17","text":"","title":"Methods"},{"location":"api/#connect_3","text":"","title":"connect"},{"location":"api/#log","text":"","title":"Log"},{"location":"api/#functions_10","text":"","title":"Functions"},{"location":"api/#info","text":"","title":"info"},{"location":"api/#warning","text":"","title":"warning"},{"location":"api/#error","text":"","title":"error"},{"location":"usage/","text":"Introduction Welcome to librime-lua This page would teach you how to compose a lua script for librime Export Lua function to librime Create rime.lua Please Create Rime.lua at PATH_TO_RIME_USER_DATA_DIR/rime.lua This is the only entry for librime to access lua component, All function in rime.lua would exposed to librime. Import function to rime.lua rime.lua All lua function Example are in librime-lua-src/example -- translators: -- date_translator Details at `lua/date.lua` -- Translate `date` to current date. date_translator = require(\"date\") -- time_translator Details at `lua/time.lua` -- Translate `time` to current time. time_translator = require(\"time\") -- number_translator Details at `lua/number.lua` -- translate '/' + Digits to Digits in Han Character number_translator = require(\"number\") -- Filters: -- charset_filter Details at `lua/charset.lua` -- charset_filter\uff1b filter for CJK Extended Candidate -- charset_comment_filter: Add Comment for Specified charset local charset = require(\"charset\") charset_filter = charset.filter charset_comment_filter = charset.comment_filter -- Details at `lua/single_char.lua` -- single_char_filter: Bringing Candidte with Single Character to first place by sorting Candidate single_char_filter = require(\"single_char\") -- reverse_lookup Details at `lua/reverse.lua` -- ADD PINYIN comment to terra_pinyin reverse_lookup_filter = require(\"reverse\") Bind lua Function to rime schema Write something below on Rime schema engine: translators: - lua_translator@date - lua_translator@time filters: - lua_filter@charset - lua_filter@single_char_filter Then Rime Engine would able to call lua Function. Introducing built-in librime-lua Component! Check out API page for more details!","title":"Usage"},{"location":"usage/#introduction","text":"Welcome to librime-lua This page would teach you how to compose a lua script for librime","title":"Introduction"},{"location":"usage/#export-lua-function-to-librime","text":"","title":"Export Lua function to librime"},{"location":"usage/#create-rimelua","text":"Please Create Rime.lua at PATH_TO_RIME_USER_DATA_DIR/rime.lua This is the only entry for librime to access lua component, All function in rime.lua would exposed to librime.","title":"Create rime.lua"},{"location":"usage/#import-function-to-rimelua","text":"rime.lua All lua function Example are in librime-lua-src/example -- translators: -- date_translator Details at `lua/date.lua` -- Translate `date` to current date. date_translator = require(\"date\") -- time_translator Details at `lua/time.lua` -- Translate `time` to current time. time_translator = require(\"time\") -- number_translator Details at `lua/number.lua` -- translate '/' + Digits to Digits in Han Character number_translator = require(\"number\") -- Filters: -- charset_filter Details at `lua/charset.lua` -- charset_filter\uff1b filter for CJK Extended Candidate -- charset_comment_filter: Add Comment for Specified charset local charset = require(\"charset\") charset_filter = charset.filter charset_comment_filter = charset.comment_filter -- Details at `lua/single_char.lua` -- single_char_filter: Bringing Candidte with Single Character to first place by sorting Candidate single_char_filter = require(\"single_char\") -- reverse_lookup Details at `lua/reverse.lua` -- ADD PINYIN comment to terra_pinyin reverse_lookup_filter = require(\"reverse\")","title":"Import function to rime.lua"},{"location":"usage/#bind-lua-function-to-rime-schema","text":"Write something below on Rime schema engine: translators: - lua_translator@date - lua_translator@time filters: - lua_filter@charset - lua_filter@single_char_filter Then Rime Engine would able to call lua Function.","title":"Bind lua Function to rime schema"},{"location":"usage/#introducing-built-in-librime-lua-component","text":"Check out API page for more details!","title":"Introducing built-in librime-lua Component!"}]}